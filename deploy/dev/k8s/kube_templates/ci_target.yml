apiVersion: v1
kind: Service
metadata:
  name: ais-target
  labels:
    app: ais
    type: ais-target
spec:
  clusterIP: None
  selector:
    app: ais
    type: ais-target
  ports:
    - name: public
      port: ${PORT}
      targetPort: ${PORT}
      protocol: TCP
    - name: control
      port: ${PORT_INTRA_CONTROL}
      targetPort: ${PORT_INTRA_CONTROL}
      protocol: TCP
    - name: data
      port: ${PORT_INTRA_DATA}
      targetPort: ${PORT_INTRA_DATA}
      protocol: TCP
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ais-target
  labels:
    app: ais
    type: ais-target
spec:
  serviceName: ais-target
  replicas: ${NUM_TARGET}
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      app: ais
      type: ais-target
  template:
    metadata:
      labels:
        app: ais
        type: ais-target
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - ais
                  - key: type
                    operator: In
                    values:
                      - ais-target
              topologyKey: "kubernetes.io/hostname"
      initContainers:
      - name: aisinit
        image: ${AISINIT_IMAGE}
        imagePullPolicy: IfNotPresent
        env:
          - name: MY_SERVICE
            value: ais-target
          - name: MY_POD
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: K8S_NS
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: AIS_PUBLIC_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
        volumeMounts:
          - name: ais-config-templates
            mountPath: /config-templates
          - name: ais-config
            mountPath: /etc/ais
        command: ["aisinit"]
        args:
          - "-role=target"
          - "-local_config_template=/config-templates/ais_local_template.json"
          - "-output_local_config=/etc/ais/ais_local.json"
          - "-cluster_config_override=/config-templates/ais_cluster_override.json"
          - "-output_cluster_config=/etc/ais/ais.json"
      containers:
      - name: aisnode
        image: ${AISNODE_IMAGE}
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /v1/health
            port: ${PORT}
            scheme: ${PROTOCOL}
          initialDelaySeconds: 20
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /v1/health?readiness=true
            port: ${PORT}
            scheme: ${PROTOCOL}
          initialDelaySeconds: 10
          failureThreshold: 5
          periodSeconds: 5
        securityContext:
          # Required for hostport to operate, or implement a full pod security policy
          privileged: true
        env:
          - name: MY_NODE
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /tmp/gcp/creds.json
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: aws-credentials
                key: AWS_ACCESS_KEY_ID
                optional: true
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: aws-credentials
                key: AWS_SECRET_ACCESS_KEY
                optional: true
          - name: AWS_DEFAULT_REGION
            valueFrom:
              secretKeyRef:
                name: aws-credentials
                key: AWS_DEFAULT_REGION
                optional: true
          - name: OCI_TENANCY_OCID
            valueFrom:
              secretKeyRef:
                name: oci-credentials
                key: OCI_TENANCY_OCID
                optional: true
          - name: OCI_USER_OCID
            valueFrom:
              secretKeyRef:
                name: oci-credentials
                key: OCI_USER_OCID
                optional: true
          - name: OCI_REGION
            valueFrom:
              secretKeyRef:
                name: oci-credentials
                key: OCI_REGION
                optional: true
          - name: OCI_FINGERPRINT
            valueFrom:
              secretKeyRef:
                name: oci-credentials
                key: OCI_FINGERPRINT
                optional: true
          - name: OCI_PRIVATE_KEY
            valueFrom:
              secretKeyRef:
                name: oci-credentials
                key: OCI_PRIVATE_KEY
                optional: true
          - name: OCI_COMPARTMENT_OCID
            valueFrom:
              secretKeyRef:
                name: oci-credentials
                key: OCI_COMPARTMENT_OCID
                optional: true
        volumeMounts:
        - name: ais-config
          mountPath: /etc/ais
        - name: ais-logs
          mountPath: ${AIS_LOG_DIR}
        - name: ais-tls-certs
          mountPath: /var/certs
        - name: gcp-creds
          mountPath: /tmp/gcp
        ports:
          - containerPort: ${PORT}
            hostPort: ${PORT}
            protocol: TCP
        command: ["aisnode"]
        args:
          - "-config=/etc/ais/ais.json"
          - "-local_config=/etc/ais/ais_local.json"
          - "-role=target"
      volumes:
        - name: ais-config-templates
          configMap:
            name: ci-target-cm
        - name: ais-config
          emptyDir: {}
        - name: aws-credentials
          secret:
            secretName: aws-credentials
            optional: true
        - name: ais-tls-certs
          secret:
            secretName: ais-tls-certs
            optional: true
        - name: ais-logs
          hostPath:
            path: ${AIS_LOG_DIR}
            type: DirectoryOrCreate
        - name: gcp-creds
          secret:
            secretName: gcp-creds
            optional: true
        - name: oci-credentials
          secret:
            secretName: oci-credentials
            optional: true
